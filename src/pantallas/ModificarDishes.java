/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package pantallas;

import config.ComboBoxItem;
import config.Conexion;
import java.awt.Color;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joses
 */
public class ModificarDishes extends javax.swing.JDialog {

      Conexion cn = new Conexion();
    Connection con;
    DefaultTableModel model;
    Statement st;
    ResultSet rs;
     private DefaultTableModel tableModel; 
     private final MealDishesP dishes;
     Map<Integer, String> hashMap = new HashMap<>();
    private int id;
    private final int idMeal;
    private final String item;
    private final int quantity;

    /**
     * Creates new form AgregarDishes
     */
    public ModificarDishes(Frame parent, DefaultTableModel tableModel, MealDishesP dishes, int id, int idMeal, String item, int quantity) {
        super(parent, "New Registration", true); // Usando parent como Frame
        this.model = tableModel; // Inicializar el modelo de la tabla
        this.dishes = dishes; 
        initComponents();
        generarMenus();
        this.id=id;
        this.idMeal=idMeal;
        this.item=item;
        this.quantity=quantity;

       // Rellenar el JComboBox para el nombre del personal (staffName)
        cBoxMealId.setSelectedItem(idMeal);
        // Rellenar el JComboBox para el nombre del cliente (customerName)
        cboxItemId.setSelectedItem(item);
        // Si el campo `idMeals` se usa de alguna forma, puedes asignarlo también, por ejemplo:

// Establecer el valor de la cantidad en el campo de texto
        txtQuantity.setText(String.valueOf(quantity));



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel25 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        javax.swing.JButton btnAgregar7 = new javax.swing.JButton();
        javax.swing.JLabel jLabel24 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cboxItemId = new javax.swing.JComboBox<>();
        cBoxMealId = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(500, 200, 200, 200));
        setLocation(new java.awt.Point(500, 200));

        jPanel1.setBackground(new java.awt.Color(81, 81, 201));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("quantity");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("item_id");

        btnAgregar7.setBackground(new java.awt.Color(255, 153, 51));
        btnAgregar7.setText("Guardar");
        btnAgregar7.setFocusable(false);
        btnAgregar7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregar7ActionPerformed(evt);
            }
        });

        jLabel24.setBackground(new java.awt.Color(255, 153, 51));
        jLabel24.setFont(new java.awt.Font("Calling Heart", 0, 86)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 153, 51));
        jLabel24.setText(" New Dishe");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("meal_id");

        cboxItemId.setModel(new javax.swing.DefaultComboBoxModel<>());

        cBoxMealId.setModel(new javax.swing.DefaultComboBoxModel<>());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 67, Short.MAX_VALUE)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgregar7, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel3))
                            .addComponent(jLabel5)
                            .addComponent(cboxItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxMealId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cBoxMealId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboxItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(btnAgregar7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregar7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregar7ActionPerformed
        // TODO add your handling code here:}
        guardarCambios();
    }//GEN-LAST:event_btnAgregar7ActionPerformed

    /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
       
            }
        });
    }
void guardarCambios() {
    // Obtener los objetos seleccionados de los JComboBox
    ComboBoxItem selectedMeal = (ComboBoxItem) cBoxMealId.getSelectedItem();  // Obtener meal_id seleccionado
    ComboBoxItem selectedItem = (ComboBoxItem) cboxItemId.getSelectedItem();  // Obtener item_id seleccionado

    // Validar que los JComboBox no estén vacíos
    if (selectedMeal == null || selectedItem == null) {
        JOptionPane.showMessageDialog(this, "Meal and Item must be selected.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener los valores de meal_id y item_id
    int mealId = selectedMeal.getId();  // Obtención del ID de la comida seleccionada
    int itemId = selectedItem.getId();  // Obtención del ID del item seleccionado
    String itemName= selectedItem.getNombre();

    // Validar la cantidad
    String quantityText = txtQuantity.getText().trim();  // Obtener la cantidad ingresada
    if (quantityText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Quantity is required.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int quantity = 0;
    try {
        quantity = Integer.parseInt(quantityText);  // Validar que la cantidad sea un número válido
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Quantity must be a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Verificar si la fila con el ID existe
    Connection con = null;
    try {
        con = cn.getConnection();  // Obtener la conexión a la base de datos

        // Verificar que la conexión es válida
        if (con == null || con.isClosed()) {
            JOptionPane.showMessageDialog(this, "Database connection is closed or not available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar si existe un registro con el id
        String checkSql = "SELECT * FROM meal_dishes WHERE id = ?";
        PreparedStatement checkPst = con.prepareStatement(checkSql);
        checkPst.setInt(1, this.id);
        ResultSet rs = checkPst.executeQuery();
        
        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "Record with ID " + this.id + " does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Actualizar el registro en la base de datos
        String sql = "UPDATE meal_dishes SET meal_id=?, item_id=?, quantity=? WHERE id = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setInt(1, mealId);
        pst.setInt(2, itemId);
        pst.setInt(3, quantity);
        pst.setInt(4, this.id);

        int filasAfectadas = pst.executeUpdate();  // Ejecutar la actualización

        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(this, "Registration updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            // Actualizar la tabla principal (opcional)
            actualizarTabla(id, mealId, itemName, quantity);
            // Cerrar la ventana
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update record. Please check the provided information.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (con != null) {
            try {
                con.close();  // Asegurarse de cerrar la conexión
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}







      void generarMenus(){
        poblarComboBoxMeals();
        generarMenuItem();
        
    }
    
  private void poblarComboBoxMeals() {
    Connection con = null;
    PreparedStatement pstMeals = null;
    ResultSet rsMeals = null;

    try {
        con = cn.getConnection();
        if (con == null) {
            System.out.println("Error: The connection to the database could not be established.");
            return;
        }

         // Poblar JComboBox para "Meals"
        String sqlMeals = "SELECT id FROM meals";
        pstMeals = con.prepareStatement(sqlMeals);
        rsMeals = pstMeals.executeQuery();
        while (rsMeals.next()) {
            int id = rsMeals.getInt("id");
            cBoxMealId.addItem(new ComboBoxItem(id, "ID: " + id)); // El texto será "ID: {id}"
            System.out.println("Added food: ID = " + id);
        }

    } catch (SQLException e) {
        System.out.println("Error filling in the ComboBox: " + e.getMessage());
        JOptionPane.showMessageDialog(null, "Error filling in the ComboBox: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rsMeals != null) rsMeals.close();
            if (pstMeals != null) pstMeals.close();
            if (con != null && !con.isClosed()) con.close();
        } catch (SQLException e) {
            System.out.println("Connection closing error: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Connection closing error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

    
 public void generarMenuItem(){
    try {
        Conexion cn = new Conexion();
        Connection con;
        Statement st;
        ResultSet rs;

        String sql = "SELECT id, name FROM menu_items;";
        con = cn.getConnection();
        st = con.createStatement();
        rs = st.executeQuery(sql);

        // Limpiar el JComboBox antes de agregar nuevos elementos
        cboxItemId.removeAllItems();

        while (rs.next()) {
            int id = rs.getInt("id"); // Obtener el id del menú
            String name = rs.getString("name"); // Obtener el nombre del menú

            // Crear un objeto ComboBoxItem con el id y el nombre
            ComboBoxItem item = new ComboBoxItem(id, name);

            // Agregar el ComboBoxItem al JComboBox
            cboxItemId.addItem(item);

            // Agregar el id al HashMap con el nombre como clave (o cualquier otra lógica de mapeo)
            hashMap.put(id, name);
        }
    } catch (SQLException e) {
        System.out.println(e.getMessage());
    }
}

    
     void actualizarTabla(int id, int mealId, String itemName, int quantity) {
    for (int i = 0; i < model.getRowCount(); i++) {
        int tableId = (int) model.getValueAt(i, 0); // ID en la primera columna
        if (tableId == id) {
             model.setValueAt(id, i, 0);  // Actualizar meal_id
            model.setValueAt(mealId, i, 1);  // Actualizar meal_id
            model.setValueAt(itemName, i, 2);
            model.setValueAt(quantity, i, 3); // Actualizar cantidad
            break;
        }
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<ComboBoxItem> cBoxMealId;
    private javax.swing.JComboBox<ComboBoxItem> cboxItemId;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
